 /**************************
 * Time: 07.04.21 13:35:56 *
 * Host: iMac-P            *
 * User: undefined         *
 **************************/

(()=>{"use strict";var n={d:(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},o:(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r:n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})}},e={};n.r(e),n.d(e,{default:()=>p});var __awaiter=function(n,e,t,a){return new(t||(t=Promise))((function(o,i){function fulfilled(n){try{step(a.next(n))}catch(n){i(n)}}function rejected(n){try{step(a.throw(n))}catch(n){i(n)}}function step(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(fulfilled,rejected)}step((a=a.apply(n,e||[])).next())}))};if(!window.Fatcoupon||!window.Fatcoupon.ModulesImporter)throw Error("window.Fatcoupon.ModulesImporter not set, store connector injection failed");const{StoreConnector,StoreConnectorFunctionResult:t,StoreConnectorHelpers:a,MultipageStoreConnectorWrapper:o,Helpers:i,UIHelpers:r,Cookies:c,Settings:s,AjaxMethod:l,Logger:m,$:u}=window.Fatcoupon.ModulesImporter;window.Fatcoupon.StoreConnector=new o(new class extends StoreConnector{constructor(){super(...arguments),this.metadata={storeIds:{prod:["5f6d43e88147bb0012b6c3d4"]},pageSelector:".promoCartCage, #promo-form",appliedSelector:"#removePromoId",reloadPageAfterApplying:!1,redirectToPageAfterApplying:location.href.includes("checkout")?location.href:location.origin+"/checkout/shopping-cart",timeouts:{collectAndClearAppliedCoupons:2e4,getCartTotal:5e3,beforeApplyingCoupon:5e3,applyCoupon:15e3,afterApplyingCoupon:1e4}},this.functions={getCartPage:()=>__awaiter(this,void 0,void 0,(function*(){const{error:n,response:e}=yield i.ajax("GET","`/si/checkout/shopping-cart.jsp`");if(n)throw Error("ERROR: "+JSON.stringify(n));this.context.html=e})),sendRequest:(n="")=>__awaiter(this,void 0,void 0,(function*(){const e=u(this.metadata.pageSelector,this.context.html||document).closest("form"),t=i.getAllFormData(e);n?t["/atg/store/order/purchase/CartFormHandler.couponCode"]=n:t["/atg/store/order/purchase/CartFormHandler.removeCoupon"]="Remove";const{error:a,response:o}=yield i.ajax("POST",e.attr("action"),!1,{data:t});if(a)throw Error("ERROR: "+JSON.stringify(a));this.context.html=o;const r=u(".cart-box-totals",o).text().match(/Promotions[\s\S]*?(\d+\.\d+)/);return n&&r?-r.pop():0}))},this.context={cartTotal:0,html:null}}collectAndClearAppliedCoupons(){return __awaiter(this,void 0,void 0,(function*(){return yield this.functions.getCartPage(),yield this.functions.sendRequest(),[]}))}getCartTotal(){return __awaiter(this,void 0,void 0,(function*(){const n=this.context.cartTotal;return m.log("getCartTotal: "+n)(),n}))}beforeApplyingCoupon(){}applyCoupon(n){return __awaiter(this,void 0,void 0,(function*(){return this.context.cartTotal=yield this.functions.sendRequest(n),{cartTotalAfterApply:this.context.cartTotal}}))}afterApplyingCoupon(){return __awaiter(this,void 0,void 0,(function*(){}))}}(!1),new class extends StoreConnector{constructor(){super(...arguments),this.metadata={storeIds:{prod:["5f6d43e88147bb0012b6c3d4"]},pageSelector:'[name="coupon"]',appliedSelector:"#removePromoId",reloadPageAfterApplying:!1,redirectToPageAfterApplying:location.href.includes("checkout")?location.href:location.origin+"/checkout/shopping-cart",timeouts:{collectAndClearAppliedCoupons:2e4,getCartTotal:5e3,beforeApplyingCoupon:5e3,applyCoupon:15e3,afterApplyingCoupon:1e4}},this.functions={getMe:(n=!1)=>__awaiter(this,void 0,void 0,(function*(){var e,t,a,o,r,s,l;const{error:m,response:u}=yield i.ajax("POST","https://api.us-central1.gcp.commercetools.com/sharperimage/graphql",!0,{data:JSON.stringify({operationName:"getMe",query:'fragment DefaultAddress on Address {  id\n  key\n  title\n  firstName\n  lastName\n  streetName\n  streetNumber\n  phone\n  email\n  state\n  apartment\n  postalCode\n  city\n  region\n  country\n  company\n  title\n  __typename\n}\n\nfragment DefaultCustomer on Customer {\n  id\n  key\n  version\n  createdAt\n  firstName\n  lastName\n  email\n  shippingAddressIds\n  billingAddressIds\n  defaultShippingAddressId\n  defaultBillingAddressId\n  custom {\n    customFieldsRaw {\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  addresses {\n    ...DefaultAddress\n    __typename\n  }\n  customerGroup {\n    id\n    name\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultProductPrice on ProductPrice {\n  discounted {\n    value {\n      type\n      currencyCode\n      centAmount\n      fractionDigits\n      __typename\n    }\n    discount {\n      validFrom\n      validUntil\n      isActive\n      name(locale: $locale)\n      __typename\n    }\n    __typename\n  }\n  value {\n    type\n    currencyCode\n    centAmount\n    fractionDigits\n    __typename\n  }\n  custom {\n    customFieldsRaw(includeNames: "listPrice") {\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultLineItem on LineItem {\n  id\n  productId\n  name(locale: $locale)\n  productSlug(locale: $locale)\n  quantity\n  totalPrice {\n    type\n    centAmount\n    fractionDigits\n    currencyCode\n    __typename\n  }\n  discountedPricePerQuantity {\n    quantity\n    discountedPrice {\n      value {\n        centAmount\n        __typename\n      }\n      includedDiscounts {\n        discount {\n          name(locale: $locale)\n          isActive\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  variant {\n    id\n    sku\n    price(currency: $currency) {\n      tiers {\n        value {\n          centAmount\n          __typename\n        }\n        __typename\n      }\n      value {\n        centAmount\n        __typename\n      }\n      discounted {\n        value {\n          centAmount\n          __typename\n        }\n        discount {\n          isActive\n          name(locale: $locale)\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    images {\n      url\n      label\n      __typename\n    }\n    attributesRaw {\n      name\n      value\n      attributeDefinition {\n        name\n        label(locale: $locale)\n        isRequired\n        attributeConstraint\n        inputTip(locale: $locale)\n        inputHint\n        isSearchable\n        __typename\n      }\n      __typename\n    }\n    availability {\n      noChannel {\n        isOnStock\n        restockableInDays\n        availableQuantity\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  price {\n    ...DefaultProductPrice\n    __typename\n  }\n  taxedPrice {\n    totalNet {\n      centAmount\n      __typename\n    }\n    totalGross {\n      centAmount\n      __typename\n    }\n    __typename\n  }\n  taxRate {\n    amount\n    country\n    name\n    __typename\n  }\n  custom {\n    customFieldsRaw {\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultCustomLineItem on CustomLineItem {\n  id\n  name(locale: $locale)\n  quantity\n  slug\n  __typename\n}\n\nfragment DefaultPayment on Payment {\n  key\n  anonymousId\n  id\n  interfaceId\n  amountPlanned {\n    type\n    currencyCode\n    centAmount\n    fractionDigits\n    __typename\n  }\n  transactions {\n    timestamp\n    type\n    amount {\n      centAmount\n      __typename\n    }\n    interactionId\n    __typename\n  }\n  paymentStatus {\n    interfaceCode\n    interfaceText\n    __typename\n  }\n  paymentMethodInfo {\n    method\n    paymentInterface\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultRelativeDiscountValue on RelativeDiscountValue {\n  type\n  permyriad\n  __typename\n}\n\nfragment DefaultAbsoluteDiscountValue on AbsoluteDiscountValue {\n  type\n  money {\n    type\n    centAmount\n    fractionDigits\n    currencyCode\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultDiscountCode on DiscountCodeInfo {\n  discountCode {\n    id\n    code\n    isActive\n    validFrom\n    validUntil\n    name(locale: $locale)\n    cartPredicate\n    description(locale: $locale)\n    cartDiscounts {\n      key\n      cartPredicate\n      isActive\n      requiresDiscountCode\n      name(locale: $locale)\n      description(locale: $locale)\n      value {\n        type\n        ...DefaultRelativeDiscountValue\n        ...DefaultAbsoluteDiscountValue\n        __typename\n      }\n      target {\n        type\n        __typename\n      }\n      id\n      custom {\n        customFieldsRaw {\n          value\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    custom {\n      customFieldsRaw {\n        value\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultCart on Cart {\n  id\n  customerId\n  customerEmail\n  anonymousId\n  taxMode\n  shippingRateInput {\n    ... on ScoreShippingRateInput {\n      score\n      __typename\n    }\n    __typename\n  }\n  customFieldsRaw(includeNames: "giftMessage") {\n    name\n    value\n    __typename\n  }\n  lineItems {\n    ...DefaultLineItem\n    __typename\n  }\n  customLineItems {\n    ...DefaultCustomLineItem\n    __typename\n  }\n  totalPrice {\n    centAmount\n    __typename\n  }\n  shippingAddress {\n    ...DefaultAddress\n    __typename\n  }\n  billingAddress {\n    ...DefaultAddress\n    __typename\n  }\n  customer {\n    ...DefaultCustomer\n    __typename\n  }\n  taxedPrice {\n    totalNet {\n      centAmount\n      __typename\n    }\n    totalGross {\n      centAmount\n      __typename\n    }\n    taxPortions {\n      amount {\n        centAmount\n        __typename\n      }\n      name\n      rate\n      __typename\n    }\n    __typename\n  }\n  shippingInfo {\n    shippingMethodName\n    shippingMethod {\n      name\n      key\n      id\n      localizedDescriptionAllLocales {\n        value\n        locale\n        __typename\n      }\n      __typename\n    }\n    discountedPrice {\n      includedDiscounts {\n        discountedAmount {\n          type\n          currencyCode\n          centAmount\n          fractionDigits\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    price {\n      centAmount\n      __typename\n    }\n    taxedPrice {\n      totalGross {\n        type\n        currencyCode\n        centAmount\n        fractionDigits\n        __typename\n      }\n      totalNet {\n        type\n        currencyCode\n        centAmount\n        fractionDigits\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  paymentInfo {\n    payments {\n      ...DefaultPayment\n      __typename\n    }\n    __typename\n  }\n  discountCodes {\n    state\n    discountCodeRef {\n      typeId\n      id\n      __typename\n    }\n    ...DefaultDiscountCode\n    __typename\n  }\n  refusedGifts {\n    isActive\n    validFrom\n    validUntil\n    name(locale: $locale)\n    __typename\n  }\n  cartState\n  version\n  custom {\n    customFieldsRaw {\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  customerGroup {\n    key\n    id\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultOrder on Order {\n  id\n  version\n  orderNumber\n  customerId\n  customerEmail\n  anonymousId\n  createdAt\n  lineItems {\n    ...DefaultLineItem\n    __typename\n  }\n  customLineItems {\n    ...DefaultCustomLineItem\n    custom {\n      customFieldsRaw {\n        value\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  totalPrice {\n    centAmount\n    __typename\n  }\n  shippingAddress {\n    ...DefaultAddress\n    __typename\n  }\n  billingAddress {\n    ...DefaultAddress\n    __typename\n  }\n  customer {\n    ...DefaultCustomer\n    __typename\n  }\n  custom {\n    customFieldsRaw {\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  taxedPrice {\n    totalNet {\n      centAmount\n      __typename\n    }\n    totalGross {\n      centAmount\n      __typename\n    }\n    __typename\n  }\n  shippingInfo {\n    shippingMethodName\n    shippingMethod {\n      name\n      key\n      id\n      localizedDescriptionAllLocales {\n        value\n        locale\n        __typename\n      }\n      __typename\n    }\n    discountedPrice {\n      includedDiscounts {\n        discountedAmount {\n          type\n          currencyCode\n          centAmount\n          fractionDigits\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    price {\n      centAmount\n      __typename\n    }\n    deliveries {\n      id\n      items {\n        id\n        quantity\n        __typename\n      }\n      parcels {\n        trackingData {\n          trackingId\n          isReturn\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  paymentInfo {\n    payments {\n      amountPlanned {\n        centAmount\n        __typename\n      }\n      paymentMethodInfo {\n        method\n        paymentInterface\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  discountCodes {\n    state\n    discountCodeRef {\n      typeId\n      id\n      __typename\n    }\n    ...DefaultDiscountCode\n    __typename\n  }\n  __typename\n}\n\nquery getMe($locale: Locale!, $currency: Currency!, $orderNumber: String) {\n  me {\n    cart: activeCart {\n      ...DefaultCart\n      __typename\n    }\n    order: order(orderNumber: $orderNumber) {\n      ...DefaultOrder\n      __typename\n    }\n    __typename\n  }\n}\n',variables:{orderNumber:"",locale:"en-us",currency:"USD"}}),headers:{authorization:"Bearer "+c.readDocumentCookie("rsf-access-token")}});if(m)throw Error("ERROR: "+JSON.stringify(m));if(n)return(null===(o=null===(a=null===(t=null===(e=null==u?void 0:u.data)||void 0===e?void 0:e.me)||void 0===t?void 0:t.cart)||void 0===a?void 0:a.totalPrice)||void 0===o?void 0:o.centAmount)/100||this.context.cartTotal||0;for(const n of(null===(l=null===(s=null===(r=null==u?void 0:u.data)||void 0===r?void 0:r.me)||void 0===s?void 0:s.cart)||void 0===l?void 0:l.discountCodes)||[]){delete n.discountCodeRef.__typename,this.context.codes.push(n.discountCodeRef)}return u.data.me.cart})),sendRequest:(n="",e={})=>__awaiter(this,void 0,void 0,(function*(){var t,a,o;this.context.variables=yield this.functions.getMe(),this.context.variables.locale="en-us",this.context.variables.currency="USD",this.context.variables.actions={},n?(this.context.variables.actions.addDiscountCode={},this.context.variables.actions.addDiscountCode.code=n,this.context.variables.actions.addDiscountCode.validateDuplicates=!0):(this.context.variables.actions.removeDiscountCode={},this.context.variables.actions.removeDiscountCode.discountCode=e);const{error:r,response:s}=yield i.ajax("POST","https://api.us-central1.gcp.commercetools.com/sharperimage/graphql",!0,{data:JSON.stringify({operationName:"updateCart",query:'fragment DefaultAddress on Address {\n  id\n  key\n  title\n  firstName\n  lastName\n  streetName\n  streetNumber\n  phone\n  email\n  state\n  apartment\n  postalCode\n  city\n  region\n  country\n  company\n  title\n  __typename\n}\n\nfragment DefaultCustomer on Customer {\n  id\n  key\n  version\n  createdAt\n  firstName\n  lastName\n  email\n  shippingAddressIds\n  billingAddressIds\n  defaultShippingAddressId\n  defaultBillingAddressId\n  custom {\n    customFieldsRaw {\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  addresses {\n    ...DefaultAddress\n    __typename\n  }\n  customerGroup {\n    id\n    name\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultProductPrice on ProductPrice {\n  discounted {\n    value {\n      type\n      currencyCode\n      centAmount\n      fractionDigits\n      __typename\n    }\n    discount {\n      validFrom\n      validUntil\n      isActive\n      name(locale: $locale)\n      __typename\n    }\n    __typename\n  }\n  value {\n    type\n    currencyCode\n    centAmount\n    fractionDigits\n    __typename\n  }\n  custom {\n    customFieldsRaw(includeNames: "listPrice") {\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultLineItem on LineItem {\n  id\n  productId\n  name(locale: $locale)\n  productSlug(locale: $locale)\n  quantity\n  totalPrice {\n    type\n    centAmount\n    fractionDigits\n    currencyCode\n    __typename\n  }\n  discountedPricePerQuantity {\n    quantity\n    discountedPrice {\n      value {\n        centAmount\n        __typename\n      }\n      includedDiscounts {\n        discount {\n          name(locale: $locale)\n          isActive\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  variant {\n    id\n    sku\n    price(currency: $currency) {\n      tiers {\n        value {\n          centAmount\n          __typename\n        }\n        __typename\n      }\n      value {\n        centAmount\n        __typename\n      }\n      discounted {\n        value {\n          centAmount\n          __typename\n        }\n        discount {\n          isActive\n          name(locale: $locale)\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    images {\n      url\n      label\n      __typename\n    }\n    attributesRaw {\n      name\n      value\n      attributeDefinition {\n        name\n        label(locale: $locale)\n        isRequired\n        attributeConstraint\n        inputTip(locale: $locale)\n        inputHint\n        isSearchable\n        __typename\n      }\n      __typename\n    }\n    availability {\n      noChannel {\n        isOnStock\n        restockableInDays\n        availableQuantity\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  price {\n    ...DefaultProductPrice\n    __typename\n  }\n  taxedPrice {\n    totalNet {\n      centAmount\n      __typename\n    }\n    totalGross {\n      centAmount\n      __typename\n    }\n    __typename\n  }\n  taxRate {\n    amount\n    country\n    name\n    __typename\n  }\n  custom {\n    customFieldsRaw {\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultCustomLineItem on CustomLineItem {\n  id\n  name(locale: $locale)\n  quantity\n  slug\n  __typename\n}\n\nfragment DefaultPayment on Payment {\n  key\n  anonymousId\n  id\n  interfaceId\n  amountPlanned {\n    type\n    currencyCode\n    centAmount\n    fractionDigits\n    __typename\n  }\n  transactions {\n    timestamp\n    type\n    amount {\n      centAmount\n      __typename\n    }\n    interactionId\n    __typename\n  }\n  paymentStatus {\n    interfaceCode\n    interfaceText\n    __typename\n  }\n  paymentMethodInfo {\n    method\n    paymentInterface\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultRelativeDiscountValue on RelativeDiscountValue {\n  type\n  permyriad\n  __typename\n}\n\nfragment DefaultAbsoluteDiscountValue on AbsoluteDiscountValue {\n  type\n  money {\n    type\n    centAmount\n    fractionDigits\n    currencyCode\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultDiscountCode on DiscountCodeInfo {\n  discountCode {\n    id\n    code\n    isActive\n    validFrom\n    validUntil\n    name(locale: $locale)\n    cartPredicate\n    description(locale: $locale)\n    cartDiscounts {\n      key\n      cartPredicate\n      isActive\n      requiresDiscountCode\n      name(locale: $locale)\n      description(locale: $locale)\n      value {\n        type\n        ...DefaultRelativeDiscountValue\n        ...DefaultAbsoluteDiscountValue\n        __typename\n      }\n      target {\n        type\n        __typename\n      }\n      id\n      custom {\n        customFieldsRaw {\n          value\n          name\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    custom {\n      customFieldsRaw {\n        value\n        name\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment DefaultCart on Cart {\n  id\n  customerId\n  customerEmail\n  anonymousId\n  taxMode\n  shippingRateInput {\n    ... on ScoreShippingRateInput {\n      score\n      __typename\n    }\n    __typename\n  }\n  customFieldsRaw(includeNames: "giftMessage") {\n    name\n    value\n    __typename\n  }\n  lineItems {\n    ...DefaultLineItem\n    __typename\n  }\n  customLineItems {\n    ...DefaultCustomLineItem\n    __typename\n  }\n  totalPrice {\n    centAmount\n    __typename\n  }\n  shippingAddress {\n    ...DefaultAddress\n    __typename\n  }\n  billingAddress {\n    ...DefaultAddress\n    __typename\n  }\n  customer {\n    ...DefaultCustomer\n    __typename\n  }\n  taxedPrice {\n    totalNet {\n      centAmount\n      __typename\n    }\n    totalGross {\n      centAmount\n      __typename\n    }\n    taxPortions {\n      amount {\n        centAmount\n        __typename\n      }\n      name\n      rate\n      __typename\n    }\n    __typename\n  }\n  shippingInfo {\n    shippingMethodName\n    shippingMethod {\n      name\n      key\n      id\n      localizedDescriptionAllLocales {\n        value\n        locale\n        __typename\n      }\n      __typename\n    }\n    discountedPrice {\n      includedDiscounts {\n        discountedAmount {\n          type\n          currencyCode\n          centAmount\n          fractionDigits\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    price {\n      centAmount\n      __typename\n    }\n    __typename\n  }\n  paymentInfo {\n    payments {\n      ...DefaultPayment\n      __typename\n    }\n    __typename\n  }\n  discountCodes {\n    state\n    discountCodeRef {\n      typeId\n      id\n      __typename\n    }\n    ...DefaultDiscountCode\n    __typename\n  }\n  refusedGifts {\n    isActive\n    validFrom\n    validUntil\n    name(locale: $locale)\n    __typename\n  }\n  cartState\n  version\n  custom {\n    customFieldsRaw {\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  customerGroup {\n    key\n    id\n    __typename\n  }\n  __typename\n}\n\nmutation updateCart($id: String!, $version: Long!, $actions: [CartUpdateAction!]!, $locale: Locale!, $currency: Currency!, $storeKey: KeyReferenceInput) {\n  cart: updateCart(id: $id, version: $version, actions: $actions, storeKey: $storeKey) {\n    ...DefaultCart\n    __typename\n  }\n}\n',variables:this.context.variables}),headers:{authorization:"Bearer "+c.readDocumentCookie("rsf-access-token")}});return(null===(o=null===(a=null===(t=null==s?void 0:s.data)||void 0===t?void 0:t.cart)||void 0===a?void 0:a.totalPrice)||void 0===o?void 0:o.centAmount)/100||this.context.cartTotal||0}))},this.context={cartTotal:0,cartTotalAfterApply:0,variables:null,codes:[]}}collectAndClearAppliedCoupons(){return __awaiter(this,void 0,void 0,(function*(){this.context.variables=yield this.functions.getMe(),this.context.cartTotal=yield this.functions.getMe(!0);for(const n of this.context.codes)this.context.cartTotal=yield this.functions.sendRequest("",n);return this.context.cartTotalAfterApply=0,[]}))}getCartTotal(){return __awaiter(this,void 0,void 0,(function*(){const n=this.context.cartTotalAfterApply||this.context.cartTotal;return m.log("getCartTotal: "+n)(),n}))}beforeApplyingCoupon(){}applyCoupon(n){return __awaiter(this,void 0,void 0,(function*(){return this.context.cartTotal=yield this.functions.sendRequest(n),{cartTotalAfterApply:this.context.cartTotal}}))}afterApplyingCoupon(){return __awaiter(this,void 0,void 0,(function*(){}))}}(!1)),m.borderedMessage("FatCoupon: store connector injected!","#a3cc91");const p=window.Fatcoupon.StoreConnector})();